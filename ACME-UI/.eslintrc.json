{
  "root": true,
  "ignorePatterns": ["**/*"],
  "parserOptions": {
    "sourceType": "module"
  },
  "plugins": ["@nrwl/nx", "simple-import-sort", "import", "sort-class-members"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": ["@shared/**", "@theme/**", "@core/**", "pages/**"],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": ["*"]
              }
            ]
          }
        ],
        "sort-class-members/sort-class-members": [
          2,
          {
            "order": [
              "[conventional-private-properties]",
              "[properties]",
              "[static-properties]",
              "[static-methods]",
              "constructor",
              "[methods]",
              "[conventional-private-methods]"
            ],
            "accessorPairPositioning": "getThenSet",
            "groups": {
              "event-handlers": [{ "name": "/on.+/", "type": "method" }]
            }
          }
        ]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": ["plugin:@nrwl/nx/typescript"],
      "rules": {}
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["plugin:@nrwl/nx/javascript"],
      "rules": {}
    },
    {
      // Use these rules from eslint-plugin-import
      // (https://github.com/benmosher/eslint-plugin-import/) if you want hoist
      // imports to the top, add a blank line after them and merge duplicates.
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "plugins": ["import"],
      "rules": {
        "import/first": "error",
        "import/newline-after-import": "error",
        "import/no-duplicates": "error"
      }
    },
    // {
    //   "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
    //   "env": { "node": true },
    //   "rules": {
    //     "simple-import-sort/imports": "off",
    //     "import/order": ["error", { "newlines-between": "always" }]
    //   }
    // },
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "env": { "node": true },
      "rules": {
        "simple-import-sort/imports": [
          "error",
          {
            "groups": [
              // Node.js builtins. You could also generate this regex if you use a `.js` config.
              // For example: `^(${require("module").builtinModules.join("|")})(/|$)`
              [
                "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)"
              ],

              // Packages. `react/angular` related packages come first.
              ["^react|@angular/(.*)$"],

              // External packages starting with @
              ["^(?!@globalLib)(?!@core)(?!@shared)(?!@theme)@?\\w"],

              // External packages not starting with @
              ["^(?!pages)[a-zA-Z](.*)$"],

              // Internal packages.
              ["^@globalLib/(.*)"],
              ["^@core/(.*)"],
              ["^@shared/(.*)"],
              ["^@theme/(.*)"],
              ["^pages/(.*)$"],
              ["^(components|utils|config)(/.*|$)"],

              // Side effect imports.
              ["^\\u0000"],

              // Parent imports. Put `..` last.
              ["^\\.\\.(?!/?$)", "^\\.\\./?$"],

              // Other relative imports. Put same-folder imports and `.` last.
              ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],

              // Style imports.
              ["^.+\\.s?css$"]
            ]
          }
        ]
      }
    }
    // {
    //   "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
    //   "rules": {
    //     "import/order": [
    //       "error",
    //       {
    //         "groups": ["external", "builtin", "internal", "index", "sibling", "parent", "object"],
    //         "pathGroups": [
    //           {
    //             "pattern": "@angular/**",
    //             "group": "external",
    //             "position": "before"
    //           },
    //           {
    //             "pattern": "@globalShared/**",
    //             "group": "external",
    //             "position": "after"
    //           },
    //           {
    //             "pattern": "@core/**",
    //             "group": "external",
    //             "position": "after"
    //           },
    //           {
    //             "pattern": "@shared/**",
    //             "group": "external",
    //             "position": "after"
    //           },
    //           {
    //             "pattern": "@theme/**",
    //             "group": "external",
    //             "position": "after"
    //           },
    //           {
    //             "pattern": "@theme/**",
    //             "group": "external",
    //             "position": "after"
    //           },
    //           {
    //             "pattern": "pages/**",
    //             "group": "external",
    //             "position": "after"
    //           }
    //         ],
    //         "pathGroupsExcludedImportTypes": ["builtin"],
    //         "newlines-between": "always",
    //         "alphabetize": {
    //           "order": "asc",
    //           "caseInsensitive": true
    //         }
    //       }
    //     ]
    //   }
    // }
  ]
}
